import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://api:8000/ask")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_personas = {}

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"), KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

CHARACTERS_LIST = """
üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:

‚Ä¢ –ì–µ—Ä–∞–ª—å—Ç (—Ç–∞–∫–∂–µ: –ì–µ—Ä–∞–ª—å—Ç –∏–∑ –†–∏–≤–∏–∏, –ë–µ–ª—ã–π –≤–æ–ª–∫, –ú—è—Å–Ω–∏–∫ –∏–∑ –ë–ª–∞–≤–∏–∫–µ–Ω–∞)
‚Ä¢ –õ—é—Ç–∏–∫ (—Ç–∞–∫–∂–µ: –Æ–ª–∏–∞–Ω –ê–ª—å—Ñ—Ä–µ–¥ –ü–∞–Ω–∫—Ä–∞—Ü, –≤–∏–∫–æ–Ω—Ç –¥–µ –õ–µ—Ç—Ç–µ–Ω—Ö–æ—Ñ)
‚Ä¢ –ô–µ–Ω–Ω–∏—Ñ–µ—Ä (—Ç–∞–∫–∂–µ: –ô–µ–Ω, –ô–µ–Ω–Ω–∏—Ñ—ç—Ä –∏–∑ –í–µ–Ω–≥–µ—Ä–±–µ—Ä–≥–∞)
‚Ä¢ –¶–∏—Ä–∏ (—Ç–∞–∫–∂–µ: –¶–∏—Ä–∏–ª–ª–∞)
‚Ä¢ –¢—Ä–∏—Å—Å –ú–µ—Ä–∏–≥–æ–ª—å–¥ (—Ç–∞–∫–∂–µ: –¢—Ä–∏—Å—Å)
‚Ä¢ –í–µ—Å–µ–º–∏—Ä
‚Ä¢ –õ–∞–º–±–µ—Ä—Ç
‚Ä¢ –≠—Å–∫–µ–ª—å
‚Ä¢ –†–µ–≥–∏—Å
‚Ä¢ –ù—ç–Ω–Ω–µ–∫–µ
‚Ä¢ –§–æ–ª—å—Ç–µ—Å—Ç
‚Ä¢ –≠–º–≥—ã—Ä –≤–∞—Ä –≠–º—Ä–µ–π—Å (—Ç–∞–∫–∂–µ: –≠–º–≥—ã—Ä)
‚Ä¢ –î–∏–π–∫—Å—Ç—Ä–∞ (—Ç–∞–∫–∂–µ: –°–∏–≥–∏–∑–º—É–Ω–¥ –î–∏–π–∫—Å—Ç—Ä–∞)
‚Ä¢ –í–∏–ª—å–≥–µ—Ñ–æ—Ä—Ü
‚Ä¢ –ö–µ–π—Ä–∞ –ú–µ—Ü (—Ç–∞–∫–∂–µ: –ö–µ–π—Ä–∞)
‚Ä¢ –ó–æ–ª—Ç–∞–Ω –•–∏–≤–∞–π (—Ç–∞–∫–∂–µ: –ó–æ–ª—Ç–∞–Ω)

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏–º—è –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!
"""

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_personas.pop(message.from_user.id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!",
        reply_markup=main_keyboard
    )

@dp.message(Command("switch"))
async def cmd_switch(message: types.Message):
    user_personas.pop(message.from_user.id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await message.answer(
        "üîÑ –•–æ—Ä–æ—à–æ, —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–ø–µ—Ä—å?",
        reply_markup=main_keyboard
    )

@dp.message(Command("characters"))
async def cmd_characters(message: types.Message):
    await message.answer(CHARACTERS_LIST, reply_markup=main_keyboard)

@dp.message(F.text == "–°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def handle_switch_button(message: types.Message):
    await cmd_switch(message)

@dp.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
async def handle_characters_button(message: types.Message):
    await cmd_characters(message)

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text.startswith('/'):
        return

    if user_id not in user_personas:
        user_personas[user_id] = text
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª {text}. –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=main_keyboard
        )
        return

    persona = user_personas[user_id]
    query = text

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(FASTAPI_URL, json={"persona": persona, "query": query}) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    await message.answer(
                        data.get("answer", "ü§î –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"),
                        reply_markup=main_keyboard
                    )
                else:
                    await message.answer(
                        "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        reply_markup=main_keyboard
                    )
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}",
                reply_markup=main_keyboard
            )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())